import logging
import asyncio
import pandas as pd
import cx_Oracle
from asyncua import ua, Server
from asyncua.common.methods import uamethod

logging.basicConfig(level=logging.INFO)
_logger = logging.getLogger('asyncua')

@uamethod
def func(parent, value):
    return value * 2

#ADW Connection
cx_Oracle.init_oracle_client(lib_dir=r"C:\oracle\instantclient_19_14") #to set wallet path follow https://www.oracle.com/database/technologies/appdev/python/quickstartpython.html
connection = cx_Oracle.connect(user="yty_sample", password="Oracle#12345678", dsn="ebiwdb_high") # set wallet credentials 
cursor = connection.cursor()

#To Remove table uncomment line no 22 to 25
# cursor.execute("""begin
#                      execute immediate 'drop table demo_opcua';
#                      exception when others then if sqlcode <> -942 then raise; end if;
#                   end;""")

#To create table uncomment Line no 28
#cursor.execute("create table yty_machine_log_opcua (id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, logged_at TIMESTAMP (2) NOT NULL, temperature float, pressure float, pumpsetting varchar2(20))")


async def main():
    # setup our server
    server = Server()
    await server.init()
    server.set_endpoint('opc.tcp://127.0.0.1:4840/opcua/')
    server.set_server_name("DevNet OPC-UA Test Server")

    # setup our own namespace, not really necessary but should as spec
    uri = 'http://devnetiot.com/opcua/'
    idx = await server.register_namespace(uri)

    # populating our address space
    # server.nodes, contains links to very common nodes like objects and root
    obj_vplc = await server.nodes.objects.add_object(idx, 'vPLC1')
    var_temperature = await obj_vplc.add_variable(idx, 'temperature', 0)
    var_pressure = await obj_vplc.add_variable(idx, 'pressure', 0)
    var_pumpsetting = await obj_vplc.add_variable(idx, 'pumpsetting', 0)

    # Read Sensor Data from csv file
    df = pd.read_csv("sensor.csv")
    # Only use sensor data from 03 and 01 (preference)
    sensor_data = pd.concat([df["sensor_03"], df["sensor_01"]], axis=1)

    _logger.info('Starting server!')
    async with server:
        # run forever and iterate over the dataframe
        while True:
            for row in sensor_data.itertuples():
                # if below the mean use different setting - just for testing
                if row[1] < df["sensor_03"].mean():
                    setting = "standard"
                else:
                    setting = "speed"

                # To write variables to opcua client uncomment line no 65 to 68
                # await var_temperature.write_value(float(row[1]))
                # await var_pressure.write_value(float(row[2]))
                # await var_pumpsetting.write_value(str(setting))
                # await asyncio.sleep(1)

                #To dump variables to ADW uncomment line no 71 to 74
                print(float(row[1]), float(row[2]), str(setting))
                cursor.execute("insert into yty_machine_log_opcua(logged_at, temperature, pressure, pumpsetting) values (LOCALTIMESTAMP(2), :1, :2, :3)", (float(row[1]), float(row[2]), str(setting)))
                connection.commit()
                await asyncio.sleep(1)

             

if __name__ == '__main__':
    #python 3.6 or lower
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    #python 3.7 onwards (comment lines above)
    #asyncio.run(main())